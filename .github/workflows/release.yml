name: Go Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags starting with 'v'

jobs:
  build:
    strategy:
      matrix:
        goos: [ubuntu-latest, windows-latest, macos-latest]
        goarch: [amd64, arm64] # Add arm64 for Linux and macOS if needed
    runs-on: ${{ matrix.goos }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '^1.23'

      - name: Build project
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-s -w" -o gofs-${{ matrix.goos }}-${{ matrix.goarch }}${{ env.EXE_EXTENSION }} ./...
        env:
          EXE_EXTENSION: ${{ runner.os == 'windows' && '.exe' || '' }}

      - name: Upload binaries to release
        uses: actions/upload-artifact@v3
        env:
          EXE_EXTENSION: ${{ runner.os == 'windows' && '.exe' || '' }}
        with:
          name: gofs-${{ matrix.goos }}-${{ matrix.goarch }}
          path: gofs-${{ matrix.goos }}-${{ matrix.goarch }}${{ env.EXE_EXTENSION }}


  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get tag name
        id: get_tag_name
        run: echo "::set-output name=tag_name::$(git describe --tags --abbrev=0)"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag_name.outputs.tag_name }}
          release_name: Release ${{ steps.get_tag_name.outputs.tag_name }}
          body: |
            Automated release by GitHub Actions.

            * Add your release notes here *

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gofs-*